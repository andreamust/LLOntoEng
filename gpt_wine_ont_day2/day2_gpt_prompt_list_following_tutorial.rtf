{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red39\green40\blue50;\red184\green184\blue200;\red156\green155\blue176;
}
{\*\expandedcolortbl;;\cssrgb\c20392\c20784\c25490;\cssrgb\c77255\c77255\c82353;\cssrgb\c67451\c67451\c74510;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13680\viewh15580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 *** Day 2 prompt list: 
\f1\b \cf2 \expnd0\expndtw0\kerning0
"Ontology Development 101: A Guide to Creating Your First Ontology"\
\
\ul Prompt 1:\ulnone \
\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 You are an experienced knowledge engineer, and you are going to model the wine domain using the following tutorial: "Ontology Development 101: A Guide to Creating Your First Ontology". I will walk you through the tutorial step by step.
\fs32 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs24 \cf2 \ul \ulc2 Prompt 2:\ulnone \

\f0\b0\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 Step 1. Determine the domain and scope of the ontology\
We suggest starting the development of an ontology by defining its domain and scope. That is, answer several basic questions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What is the domain that the ontology will cover?\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
For what we are going to use the ontology?\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
For what types of questions the information in the ontology should provide answers?\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Who will use and maintain the ontology?\
\pard\pardeftab720\partightenfactor0
\cf2 The answers to these questions may change during the ontology-design process, but at any given time they help limit the scope of the model.\
Consider the ontology of wine and food that we introduced earlier. Representation of food and wines is the domain of the ontology. We plan to use this ontology for the applications that suggest good combinations of wines and food.\
Naturally, the concepts describing different types of wines, main food types, the notion of a good combination of wine and food and a bad combination will figure into our ontology. At the same time, it is unlikely that the ontology will include concepts for managing inventory in a winery or employees in a restaurant even though these concepts are somewhat related to the notions of wine and food.\
If the ontology we are designing will be used to assist in natural language processing of articles in wine magazines, it may be important to include synonyms and part-of-speech information for concepts in the ontology. If the ontology will be used to help restaurant customers decide which wine to order, we need to include retail-pricing information. If it is used for wine buyers in stocking a wine cellar, wholesale pricing and availability may be necessary. If the people who will maintain the ontology describe the domain in a language that is different from the language of the ontology users, we may need to provide the mapping between the languages.\
Competency questions.\
One of the ways to determine the scope of the ontology is to sketch a list of questions that a knowledge base based on the ontology should be able to answer, competency questions. These questions will serve as the litmus test later: Does the ontology contain enough information to answer these types of questions? Do the answers require a particular level of detail or representation of a particular area? These competency questions are just a sketch and do not need to be exhaustive.\
In the wine and food domain, the following are the possible competency questions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Which wine characteristics should I consider when choosing a wine?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Is Bordeaux a red or white wine?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Does Cabernet Sauvignon go well with seafood?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What is the best choice of wine for grilled meat?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Which characteristics of a wine affect its appropriateness for a dish?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Does a bouquet or body of a specific wine change with vintage year?\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What were good vintages for Napa Zinfandel?\
\pard\pardeftab720\partightenfactor0
\cf2 Judging from this list of questions, what information will be included in the ontology?
\fs32 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs24 \cf2 \ul \ulc2 Prompt 3:\
\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 \ulnone Step 2. Enumerate important terms in the ontology\
It is useful to write down a list of all terms we would like either to make statements about or to explain to a user. What are the terms we would like to talk about? What properties do those terms have? What would we like to say about those terms? Based on the output from step1, Enumerate important terms in the ontology?\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf2 \ul \ulc2 Prompt 4:\
\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 \ulnone Step 3. Define the classes and the class hierarchy\
There are several possible approaches in developing a class hierarchy:\
\'95 A top-down development process starts with the definition of the most general concepts in the domain and subsequent specialization of the concepts. For example, we can start with creating classes for the general concepts of Wine and Food. Then we specialize the Wine class by creating some of its subclasses: White wine, Red wine, Ros\'e9 wine. We can further categorize the Red wine class, for example, into Syrah, Red Burgundy, Cabernet Sauvignon, and so on. A bottom-up development process starts with the definition of the most specific classes, the leaves of the hierarchy, with subsequent grouping of these classes into more general concepts. For example, we start by defining classes for Pauillac and Margaux wines. We then create a common superclass for these two classes\'97Medoc\'97which in turn is a subclass of Bordeaux.\
\'95 A combination development process is a combination of the top-down and bottom- up approaches: We define the more salient concepts first and then generalize and specialize them appropriately. We might start with a few top-level concepts such as Wine, and a few specific concepts, such as Margaux . We can then relate them to a middle-level concept, such as Medoc. Then we may want to generate all of the regional wine classes from France, thereby generating a number of middle-level concepts. None of these three methods is inherently better than any of the others. The approach to take depends strongly on the personal view of the domain. If a developer has a systematic top-down view of the domain, then it may be easier to use the top-down approach. The combination approach is often the easiest for many ontology developers, since the concepts \'93in the middle\'94 tend to be the more descriptive concepts in the domain.\
If you tend to think of wines by distinguishing the most general classification first, then the top-down approach may work better for you. If you\'92d rather start by getting grounded with specific examples, the bottom-up approach may be more appropriate.\
Whichever approach we choose, we usually start by defining classes. From the list created in Step 2, select the terms that describe objects having independent existence rather than terms that describe these objects. These terms will be classes in the ontology and will become anchors in the class hierarchy. Organize the classes into a hierarchical taxonomy by asking if by being an instance of one class, the object will necessarily (i.e., by definition) be an instance of some other class.\
If a class A is a superclass of class B, then every instance of B is also an instance of A\
In other words, the class B represents a concept that is a \'93kind of\'94 A.\
For example, every Pinot Noir wine is necessarily a red wine. Therefore the Pinot Noir\
class is a subclass of the Red Wine class. Choose the best approach and display the full classes and classes hierarchy\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf2 \ul \ulc2 Prompt 5:
\f0\b0 \cf2 \ulnone \
\pard\pardeftab720\partightenfactor0
\cf2 Step 4. Define the properties of classes\'97slots\
The classes alone will not provide enough information to answer the competency questions from Step 1. Once we have defined some of the classes, we must describe the internal structure of concepts.\
We have already selected classes from the list of terms we created in Step 2. Most of the remaining terms are likely to be properties of these classes. These terms include, for example, a wine\'92s color, body, flavor and sugar content and location of a winery.\
For each property in the list, we must determine which class it describes. These properties become slots attached to classes. Thus, the Wine class will have the following slots: color, body, flavor, and sugar. And the class Winery will have a location slot.\
In general, there are several types of object properties that can become slots in an ontology:\
\'95 \'93intrinsic\'94 properties such as the flavor of a wine;\
\'95 \'93extrinsic\'94 properties such as a wine\'92s name, and area it comes from;\
\'95 parts, if the object is structured; these can be both physical and abstract \'93parts\'94 (e.g., the courses of a meal)\
\'95 relationships to other individuals; these are the relationships between individual members of the class and other items (e.g., the maker of a wine, representing a relationship between a wine and a winery, and the grape the wine is made from.)\
Thus, in addition to the properties we have identified earlier, we need to add the following slots to the Wine class: name, area, maker, grape. All subclasses of a class inherit the slot of that class. For example, all the slots of the class Wine will be inherited to all subclasses of Wine, including Red Wine and White Wine. We will add an additional slot, tannin level (low, moderate, or high), to the Red Wine class. The tannin level slot will be inherited by all the classes representing red wines (such as Bordeaux and Beaujolais). A slot should be attached at the most general class that can have that property. For instance, body and color of a wine should be attached at the class Wine, since it is the most general class whose instances will have body and color. Based on the description of step 4 and the class hierarchy you defined above define the properties of all classes\cf2 \'97slots\cf2 ?\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf2 \ul \ulc2 Prompt 6:\
\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 \ulnone Step 5. Define the facets of the slots\
Slots can have different facets describing the value type, allowed values, the number of the values (cardinality), and other features of the values the slot can take. For example, the value of a name slot (as in \'93the name of a wine\'94) is one string. That is, name is a slot with value type String. A slot produces (as in \'93a winery produces these wines\'94) can have multiple values and the values are instances of the class Wine. That is, produces is a slot with value type Instance with Wine as allowed class. We will now describe several common facets.\

\f1\b Slot cardinality
\f0\b0 \
Slot cardinality defines how many values a slot can have. Some systems distinguish only between single cardinality (allowing at most one value) and multiple cardinality (allowing any number of values). A body of a wine will be a single cardinality slot (a wine can have only one body). Wines produced by a particular winery fill in a multiple-cardinality slot produces for a Winery class. Some systems allow specification of a minimum and maximum cardinality to describe the number of slot values more precisely. Minimum cardinality of N means that a slot must have at least N values. For example, the grape slot of a Wine has a minimum cardinality of 1: each wine is made of at least one variety of grape. Maximum cardinality of M means that a slot can have at most M values. The maximum cardinality for the grape slot for single varietal wines is 1: these wines are made from only one variety of grape. Sometimes it may be useful to set the maximum cardinality to 0. This setting would indicate that the slot cannot have any values for a particular subclass.\

\f1\b Slot-value type
\f0\b0 \
A value-type facet describes what types of values can fill in the slot. Here is a list of the more common value types:\
\'95 String is the simplest value type which is used for slots such as name: the value is a simple string\
\'95 Number (sometimes more specific value types of Float and Integer are used) describes slots with numeric values. For example, a price of a wine can have a value type Float\
\'95 Boolean slots are simple yes\'96no flags. For example, if we choose not to represent sparkling wines as a separate class, whether or not a wine is sparkling can be represented as a value of a Boolean slot: if the value is \'93true\'94 (\'93yes\'94) the wine is sparkling and if the value is \'93false\'94 (\'93no\'94) the wine is not a sparkling one.\
\'95 Enumerated slots specify a list of specific allowed values for the slot. For example, we can specify that the flavor slot can take on one of the three possible values: strong,moderate, anddelicate. In Prot\'e9g\'e9-2000 the enumerated slots are of type Symbol.\
\'95 Instance-type slots allow definition of relationships between individuals. Slots with value type Instance must also define a list of allowed classes from which the instances can come. For example, a slot produces for the class Winery may have instances of the class Wine as its values. \

\f1\b Domain and range of a slot
\f0\b0 \
Allowed classes for slots of type Instance are often called a range of a slot. Some systems allow restricting the range of a slot when the slot is attached for a particular class.\
The classes to which a slot is attached or a classes which property a slot describes, are called the domain of the slot. The Winery class is the domain of the produces slot. In the systems where we attach slots to classes, the classes to which the slot is attached usually constitute the domain of that slot. There is no need to specify the domain separately.\
The basic rules for determining a domain and a range of a slot are similar:\
When defining a domain or a range for a slot, find the most general classes or class that can be respectively the domain or the range for the slots .\
On the other hand, do not define a domain and range that is overly general: all the classes in the domain of a slot should be described by the slot and instances of all the classes in the range of a slot should be potential fillers for the slot. Do not choose an overly general class for range (i.e., one would not want to make the range THING) but one would want to choose a class that will cover all fillers. Instead of listing all possible subclasses of the Wine class for the range of the produces slot, just list Wine. At the same time, we do not want to specify the range of the slot as THING\'97the most general class in an ontology.\
In more specific terms:\
If a list of classes defining a range or a domain of a slot includes a class and its subclass, remove the subclass.\
If the range of the slot contains both the Wine class and the Red Wine class, we can remove the Red Wine from the range because it does not add any new information: The Red Wine is a subclass of Wine and therefore the slot range already implicitly includes it as well as all other subclasses of the Wine class.\
If a list of classes defining a range or a domain of a slot contains all subclasses of a class A, but not the class A itself, the range should contain only the class A and not the subclasses.\
Instead of defining the range of the slot to include Red Wine, White Wine, and Rose Wine (enumerating all the direct subclasses of Wine), we can limit the range to the class Wine itself.\
If a list of classes defining a range or a domain of a slot contains all but a few subclasses of a class A, consider if the class A would make a more appropriate range definition.\
In systems where attaching a slot to a class is the same as adding the class to the domain of the slot, the same rules apply to slot attachment: On the one hand, we should try to make it as general as possible. On the other hand, we must ensure that each class to which we attach the slot can indeed have the property that the slot represents. We can attach the tannin level slot to each of the classes representing red wines (e.g., Bordeaux, Merlot, Beaujolais, etc.). However, since all red wines have the tannin-level property, we should instead attach the slot to this more general class of Red Wines. Generalizing the domain of the tannin level slot further (by attaching it to the Wine class instead) would not be correct since we do not use tannin level to describe white wines for example.\
Based on the description of step 5 and class hierarchy and properties you defined before can you define the facets of classes?
\fs32 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs24 \cf2 \ul \ulc2 Prompt 7:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0\fs32 \cf2 \ulnone \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 Step 6. Create instances\
The last step is creating individual instances of classes in the hierarchy. Defining an individual instance of a class requires (1) choosing a class, (2) creating an individual instance of that class, and (3) filling in the slot values. For example, we can create an individual instance Chateau-Morgon-Beaujolais to represent a specific type of Beaujolais wine. Chateau-Morgon-Beaujolais is an instance of the class Beaujolais representing all Beaujolais wines. This instance has the following slot values defined:\
\'95 Body: Light\
\'95 Color: Red\
\'95 Flavor: Delicate\
\'95 Tannin level: Low\
\'95 Grape: Gamay (instance of the Wine grape class)\
\'95 Maker: Chateau-Morgon (instance of the Winery class)\
\'95 Region: Beaujolais (instance of the Wine-Region class) \
\'95 Sugar: Dry. \
Based on step 6 description can you generate some instances for the wine ontology you defined above?\cf3 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf2 \ul \ulc2 Prompt 8:\

\f0\b0 \cf3 \ulnone \
\pard\pardeftab720\partightenfactor0
\cf2 Considering the conceptual model you generated for the wine ontology , generate a full ontology serialized in Turtle syntax.\
\pard\pardeftab720\qc\partightenfactor0
\cf3 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\qc\partightenfactor0
\cf3 \
\pard\pardeftab720\qc\partightenfactor0

\fs32 \cf4 \
}